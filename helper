#!/bin/bash

# directory to store pidfiles
PID_DIR="/run/user/$(id -u)/"

mkdir -p ${PID_DIR}

_kill_by_pidfile() {
    PIDFILE="${PID_DIR}/$(basename ${1}).pid"
    A=$(echo $1 | awk '{print $1}')
    if [[ -f ${PIDFILE} ]]; then
        B=$(ps p `cat $PIDFILE` | grep  $A | awk '{print $5}')
        if [[ $A == $B ]]; then
            kill `cat $PIDFILE`
        else
            echo "PID \"$(echo ${PIDFILE})\" do not match with processname \"${1}\". Pidfile will be removed."
        fi
        rm ${PIDFILE}
    else
        echo "No such pidfile ${PIDFILE}"
    fi
}

_switch() {
    # Run application if it is not running
    # or kill appilication by pid file in other case
    PIDFILE="${PID_DIR}/$@.pid"
    if [[ -f "${PIDFILE}" ]]; then
        B=$(ps p `cat "$PIDFILE"` | grep  $1 | awk '{print $5}')
        if [[ $1 == $B ]]; then
            kill `cat "$PIDFILE"`
        else
            echo "PID \"$(echo ${PIDFILE})\" do not match with processname \"${1}\". Pidfile will be removed."
        fi
        rm "${PIDFILE}"
    else
        $@ &
        echo $! > "${PIDFILE}"
    fi
}
    
_restart() {
    # if there is pidfile then try to kill application by pid
    # and remove pidfile. 
    PIDFILE="${PID_DIR}/$@.pid"
    if [[ -e "${PIDFILE}" ]]; then
        B=$(ps p `cat "${PIDFILE}"` | grep  $1 | awk '{print $5}')
        if [[ $1 == $B ]]; then
            kill `cat "${PIDFILE}"`
        fi
        rm "${PIDFILE}"
    fi
    # run application
    $@ &
    # create pidfile
    echo $! > "${PIDFILE}"
}

_respawn() {
    # if there is pidfile and matching pid belongs to expected application
    # then nothing to do. Start application in other case
    PIDFILE="${PID_DIR}/$@.pid"
    if [[ -e "${PIDFILE}" ]]; then
        B=$(ps p `cat "${PIDFILE}"` | grep  $1 | awk '{print $5}')
        if [[ $1 == $B ]]; then
            echo "$@ already running"
        else
            rm "${PIDFILE}"
            # run application
            $@ &
            # create pidfile
            echo $! > "${PIDFILE}"
        fi
    else
        # run application
        $@ &
        # create pidfile
        echo $! > "${PIDFILE}"
    fi
}

case $1 in
    restart)
        shift
        _restart $@
        ;;
    respawn)
        shift
        _respawn $@
        ;;
    kill)
        _kill_by_pidfile $2
        ;;
    switch)
        shift
        _switch $@
        ;;
    *)
        ;;

esac
